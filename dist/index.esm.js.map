{"version":3,"file":"index.esm.js","sources":["../src/index.ts"],"sourcesContent":["import { isArr, isObj, isDate } from 'x-is-type';\n\nexport type equalityChecker = (...args: any[]) => boolean;\nexport type argsComparer = (a: any, b: any) => boolean;\nexport type argsValidator = equalityChecker;\n\nfunction createEqualityChecker(\n\tvalidateArgsFn: argsValidator | null = null,\n\targsComparerFn: argsComparer | null = null\n) {\n\treturn function (...args: any[]): boolean {\n\t\tif (args.length < 2) return true;\n\t\tif (typeof validateArgsFn === 'function' && !validateArgsFn(...args)) {\n\t\t\treturn false;\n\t\t}\n\t\tconst comparer = (a: any, b: any) => {\n\t\t\tif (a === b) return true;\n\t\t\treturn typeof argsComparerFn === 'function'\n\t\t\t\t? argsComparerFn(a, b)\n\t\t\t\t: false;\n\t\t};\n\t\ttypeof argsComparerFn === 'function'\n\t\t\t? argsComparerFn\n\t\t\t: (a: any, b: any) => a === b;\n\t\tfor (let i = 1; i < args.length; i++) {\n\t\t\tconst a = args[i - 1],\n\t\t\t\tb = args[i];\n\t\t\tif (comparer(a, b)) continue;\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t};\n}\n\nconst isEqualConstructor = createEqualityChecker(\n\tnull,\n\t(a, b) => a?.constructor?.name === b?.constructor?.name\n);\n\nconst isEqualDate = createEqualityChecker(\n\tisDate,\n\t(a: Date, b: Date) => a.getTime() === b.getTime()\n);\n\n/**\n * Determine if multiple arrays contain equal values recursively\n */\nfunction isEqualArr(...args: any[]): boolean {\n\treturn createEqualityChecker(isArr, (a: any[], b: any[]) => {\n\t\tif (a.length !== b.length) return false;\n\t\tfor (let i = 0; i < a.length; i++) {\n\t\t\tif (a[i] === b[i]) continue;\n\t\t\tif (isEqualArr(a[i], b[i])) continue;\n\t\t\tif (isEqualObj(a[i], b[i])) continue;\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t})(...args);\n}\n/**\n * Determine if multiple objects contain equal values recursively\n */\nfunction isEqualObj(...args: any[]): boolean {\n\tconst nonCircularKeys = (obj: Object) => {\n\t\tconst keys = Object.keys(obj);\n\t\treturn keys.filter((key) => obj[key] !== obj);\n\t};\n\treturn createEqualityChecker(\n\t\t(...args) => isObj(...args) && isEqualConstructor(...args),\n\t\t(a: Object, b: Object) => {\n\t\t\tconst keys = { a: nonCircularKeys(a), b: nonCircularKeys(b) };\n\t\t\tif (keys.a.length !== keys.b.length) return false;\n\t\t\tfor (const key of keys.a) {\n\t\t\t\tif (a[key] === b[key]) continue;\n\t\t\t\tif (isEqualArr(a[key], b[key])) continue;\n\t\t\t\tif (isEqualObj(a[key], b[key])) continue;\n\t\t\t\tif (isEqualDate(a[key], b[key])) continue;\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t)(...args);\n}\n\n/**\n * Determine if multiple values are equal,\n * works recursively on arrays and objects.\n */\nfunction isEqual(...args: any[]): boolean {\n\treturn createEqualityChecker(\n\t\tnull,\n\t\t(a, b) => a === b || isEqualObj(a, b) || isEqualArr(a, b)\n\t)(...args);\n}\n\nexport { isEqual, isEqualConstructor, isEqualArr, isEqualObj };\n"],"names":["createEqualityChecker","validateArgsFn","argsComparerFn","args","slice","call","arguments","length","apply","a","b","i","comparer","isEqualConstructor","_a$constructor","_b$constructor","name","constructor","isEqualDate","isDate","getTime","isEqualArr","isArr","isEqualObj","nonCircularKeys","obj","Object","keys","filter","key","isObj","_step","_iterator","_createForOfIteratorHelperLoose","done","value","isEqual"],"mappings":"+2BAMA,SAASA,EACRC,EACAC,GAEA,YAF0C,IAD1CD,IAAAA,EAAuC,WACG,IAA1CC,IAAAA,EAAsC,MAEP,WAAA,IAAAC,EAAA,GAAAC,MAAAC,KAAAC,WAC9B,GAAIH,EAAKI,OAAS,EAAG,OAAA,EACrB,GAA8B,mBAA1BN,IAAyCA,EAAAO,WAAA,EAAkBL,GAC9D,OAAO,EAWR,IATA,MAAiB,SAACM,EAAQC,GACzB,OAAID,IAAMC,GACuB,mBAAnBR,GACXA,EAAeO,EAAGC,EAErB,EAISC,EAAG,EAAGA,EAAIR,EAAKI,OAAQI,IAAK,CACrC,IAAOF,EAAGN,EAAKQ,EAAI,GAClBD,EAAIP,EAAKQ,GACV,IAAIC,EAASH,EAAGC,GAChB,OACA,CAAA,CACD,OAAO,CACP,CACD,CAEKG,IAAkBA,EAAGb,EAC1B,KACA,SAACS,EAAGC,GAAM,IAAAI,EAAAC,EAAA,OAAC,MAADN,GAAgBO,OAAhBP,EAAAA,EAAGQ,kBAAHR,EAAgBO,EAAAA,SAASN,MAAAA,GAAA,OAAAA,EAAAA,EAAGO,kBAAHP,EAAAK,EAAgBC,KAAnD,GAGKE,EAAclB,EACnBmB,EACA,SAACV,EAASC,GAAV,OAAuBD,EAACW,YAAcV,EAAEU,SAAxC,GAMD,SAAAC,IACC,OAA4BrB,EAACsB,EAAO,SAACb,EAAUC,GAC9C,GAAID,EAAEF,SAAWG,EAAEH,OAAQ,OAAO,EAClC,IAAK,IAAKI,EAAG,EAAGA,EAAIF,EAAEF,OAAQI,IAC7B,GAAIF,EAAEE,KAAOD,EAAEC,KACXU,EAAWZ,EAAEE,GAAID,EAAEC,MACnBY,EAAWd,EAAEE,GAAID,EAAEC,IACvB,OAAO,EAER,OACA,CAAA,GATMH,WAAA,EAAA,GAAAJ,MAAAC,KAAAC,WAUP,CAID,SAAAiB,IACC,IAAqBC,EAAG,SAACC,GAExB,OADaC,OAAOC,KAAKF,GACbG,OAAO,SAACC,GAAQJ,OAAAA,EAAII,KAASJ,CAAtB,EACnB,EACD,OAA4BzB,EAC3B,WAAIG,IAAAA,EAAS2B,GAAAA,MAAAA,KAAAA,WAAAA,OAAAA,aAAS3B,EAAAA,IAASU,EAAAL,WAAA,EAAsBL,EAArD,EACA,SAACM,EAAWC,GACX,IAAUiB,EAAG,CAAElB,EAAGe,EAAgBf,GAAIC,EAAGc,EAAgBd,IACzD,GAAIiB,EAAKlB,EAAEF,SAAWoB,EAAKjB,EAAEH,OAAQ,OAAO,EAC5C,IAAA,IAAAwB,EAAAC,EAAAC,EAAkBN,EAAKlB,KAAvBsB,EAAAC,KAAAE,MAA0B,CAAfL,IAAAA,EACVE,EAAAI,MAAA,GAAI1B,EAAEoB,KAASnB,EAAEmB,KACbR,EAAWZ,EAAEoB,GAAMnB,EAAEmB,MACrBN,EAAWd,EAAEoB,GAAMnB,EAAEmB,MACrBX,EAAYT,EAAEoB,GAAMnB,EAAEmB,IAC1B,OAAO,CACP,CACD,OACA,CAAA,GAbKrB,WAAA,EAAA,GAAAJ,MAAAC,KAAAC,WAeP,CAMD,SAAA8B,IACC,OAA4BpC,EAC3B,KACA,SAACS,EAAGC,GAAJ,OAAWD,IAAKC,GAAKa,EAAWd,EAAGC,IAAMW,EAAWZ,EAAGC,EAAvD,GAEDF,WAAA,EAAA,GAAAJ,MAAAC,KAAAC,WAAA"}